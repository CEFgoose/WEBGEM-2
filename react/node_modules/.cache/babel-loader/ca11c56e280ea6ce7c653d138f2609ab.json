{"ast":null,"code":"var _jsxFileName = \"/Users/cefgoose/Documents/WEBGEM 2/react/src/common/DataContext/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useLocalStorageState } from \"../useLocalStorageState\";\nimport { json as fetchJson } from \"d3-fetch\";\nimport { API_URL } from \"components/constants.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext({});\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n\n  const [fileID, setFileID] = useLocalStorageState(\"gem.file_id\", null);\n  const [tableData, setTableData] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [EditorRow, setEditorRow] = useState(null);\n  const [EditorLayout, setEditorLayout] = useState(null);\n  useEffect(() => {\n    if (fileID != null) {\n      fetchGemJson();\n    }\n  }, [fileID]);\n\n  const fetchGemJson = () => {\n    let jsonURL = API_URL.concat(\"gem_json/template\").concat(\"?index=\").concat(fileID);\n    fetchJson(jsonURL).then(resp => setTableData(resp));\n  };\n\n  const generateGemJsonId = () => {\n    let jsonURL = API_URL.concat(\"gem_json/generate\");\n    fetch(jsonURL).then(response => {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.text();\n    }).then(resp => setFileID(resp)).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const value = {\n    fileID,\n    tableData,\n    setTableData,\n    selectedRow,\n    EditorRow,\n    setEditorRow,\n    setSelectedRow,\n    fetchGemJson,\n    generateGemJsonId,\n    EditorLayout,\n    setEditorLayout,\n    TeamName: \"Sneffles\",\n    EditorName: \"Mappy McMappington III\",\n    UserName: \"VLD-Whatever\",\n    LineColor: 'darkgrey',\n    LineWidth: 5,\n    NodeColor: \"lightgrey\",\n    NodeSize: 5,\n    NodeShape: '/icons/circle.png',\n    UnUpLineColor: 'green',\n    UnUpNodeColor: 'orange',\n    UnUpLineWidth: 5,\n    UnUpNodeSize: 5,\n    UnUpNodeShape: '/icons/square.png',\n    FileIndex: fileID\n  };\n  return value ? /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this) : null;\n};\n\n_s(DataProvider, \"R5E05+mJe86O0591JkMal3DbI80=\", false, function () {\n  return [useLocalStorageState];\n});\n\n_c = DataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/Users/cefgoose/Documents/WEBGEM 2/react/src/common/DataContext/index.js"],"names":["React","createContext","useContext","useState","useEffect","useLocalStorageState","json","fetchJson","API_URL","DataContext","DataProvider","children","fileID","setFileID","tableData","setTableData","selectedRow","setSelectedRow","EditorRow","setEditorRow","EditorLayout","setEditorLayout","fetchGemJson","jsonURL","concat","then","resp","generateGemJsonId","fetch","response","ok","text","catch","error","console","log","value","TeamName","EditorName","UserName","LineColor","LineWidth","NodeColor","NodeSize","NodeShape","UnUpLineColor","UnUpNodeColor","UnUpLineWidth","UnUpNodeSize","UnUpNodeShape","FileIndex"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useLocalStorageState } from \"../useLocalStorageState\";\nimport { json as fetchJson } from \"d3-fetch\";\nimport { API_URL } from \"components/constants.js\";\n\nexport const DataContext = createContext({});\n\nexport const DataProvider = ({ children }) => {\n\nconst [fileID, setFileID] = useLocalStorageState(\"gem.file_id\", null);\n\nconst [tableData, setTableData] = useState(null);\n\nconst [selectedRow, setSelectedRow] = useState(null);\n\nconst [EditorRow, setEditorRow] = useState(null);\n\nconst [EditorLayout, setEditorLayout] = useState(null);\n\n  useEffect(() => {\n    if (fileID != null) {\n      fetchGemJson();\n    }\n  }, [fileID])\n\n\nconst fetchGemJson = () => {\n    let jsonURL = API_URL.concat(\"gem_json/template\")\n        .concat(\"?index=\")\n        .concat(fileID);\n    fetchJson(jsonURL) \n      .then((resp) => setTableData(resp))\n  };\n\nconst generateGemJsonId = () => {\n    let jsonURL = API_URL.concat(\"gem_json/generate\")\n      \n    fetch(jsonURL)\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.text();\n      })\n      .then((resp) => setFileID(resp))\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n\n\n\n\n\n\n   const value = {\n        fileID,\n        tableData,\n        setTableData,\n        selectedRow,\n        EditorRow,\n        setEditorRow,\n        setSelectedRow,\n        fetchGemJson,\n        generateGemJsonId,\n        EditorLayout,\n        setEditorLayout,\n        TeamName:\"Sneffles\",\n        EditorName:\"Mappy McMappington III\",\n        UserName:\"VLD-Whatever\",\n        LineColor: 'darkgrey',\n        LineWidth: 5,\n        NodeColor:\"lightgrey\",\n        NodeSize:5,\n        NodeShape:'/icons/circle.png',\n        UnUpLineColor: 'green',\n        UnUpNodeColor: 'orange',\n        UnUpLineWidth:5,\n        UnUpNodeSize:5,\n        UnUpNodeShape:'/icons/square.png',\n        FileIndex: fileID,\n    };\n\n    return value ? (\n        <DataContext.Provider value={value}>{children}</DataContext.Provider>\n    ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}