{"ast":null,"code":"var _jsxFileName = \"/Users/cefgoose/Documents/WEBGEM/react/src/components/Table/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useContext, useEffect } from 'react';\nimport ReactTable from 'react-table-6';\nimport { COLUMNS } from './columns';\nimport { DataContext } from \"../../common/DataContext\"; //import {outJson} from '../variables.js';\n\nimport { TableLineColor, NodeShapes } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar selectedList = [];\nexport const EditorTable = props => {\n  _s();\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = props.useData;\n  var selectedRowID;\n  var outJson;\n  const {\n    selectedRow,\n    setSelectedRow,\n    EditorRow,\n    setEditorRow\n  } = useContext(DataContext);\n  useEffect(() => {\n    // props.action(outJson,\"GetRowData\")\n    // setSelectedRow(EditorRow);\n    setEditorRow(selectedRow);\n  }, [selectedRow]); //localStorage.setItem(\"outJson\", outJson); \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactTable, {\n      className: \"-highlight\",\n      style: {\n        boxShadow: '0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)',\n        width: \"100%\",\n        height: \"100%\",\n        borderTop: '2px solid #f4753c',\n        borderRight: '1px solid #f4753c',\n        borderLeft: '1px solid #f4753c',\n        // borderRadius: '.9%',\n        padding: '1%'\n      },\n      sortable: false,\n      data: data,\n      defaultPageSize: 10,\n      columns: [{\n        Header: 'Name',\n        accessor: \"NAME\"\n      }, {\n        Header: 'UID',\n        accessor: \"UID\"\n      }, {\n        Header: 'Line Color',\n        accessor: \"LINECOLOR\",\n        Cell: row => /*#__PURE__*/_jsxDEV(TableLineColor, {\n          style: {\n            width: '11vw',\n            border: 'none'\n          },\n          color: row.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, {\n        Header: 'Line Width',\n        accessor: \"LINEWIDTH\"\n      }, {\n        Header: 'Node Size',\n        accessor: \"NODESIZE\"\n      }, {\n        Header: 'Node Shape',\n        accessor: \"NODESHAPE\",\n        Cell: row => row.value ? /*#__PURE__*/_jsxDEV(NodeShapes, {\n          src: row.value,\n          color: row.original.NODECOLOR\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 14\n        }, this) : \"\"\n      }],\n      resolveData: data => data.map(row => row),\n      getTdProps: (state, rowInfo) => {\n        return {\n          onClick: () => {\n            if (rowInfo) {\n              setSelectedRow(rowInfo.index);\n\n              if (EditorRow === selectedRow) {\n                setEditorRow(rowInfo.index); // console.log(rowInfo.index)\n\n                outJson = JSON.stringify({\n                  'rowId': rowInfo.index,\n                  'editor': rowInfo.original\n                });\n              }\n            }\n\n            props.action(outJson, \"GetRowData\");\n            props.action2(outJson);\n          },\n          style: {\n            color: rowInfo ? rowInfo.index === selectedRow ? '#f4753c' : null : \"\",\n            padding: rowInfo ? rowInfo.index === selectedRow ? '1%' : null : \"\",\n            fontSize: rowInfo ? rowInfo.index === selectedRow ? '20px' : null : \"\"\n          }\n        };\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 2\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditorTable, \"nNTKHKHxQmgV8T0WbrjC1F5UdIQ=\");\n\n_c = EditorTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorTable\");","map":{"version":3,"sources":["/Users/cefgoose/Documents/WEBGEM/react/src/components/Table/index.js"],"names":["React","useMemo","useState","useContext","useEffect","ReactTable","COLUMNS","DataContext","TableLineColor","NodeShapes","selectedList","EditorTable","props","columns","data","useData","selectedRowID","outJson","selectedRow","setSelectedRow","EditorRow","setEditorRow","boxShadow","width","height","borderTop","borderRight","borderLeft","padding","Header","accessor","Cell","row","border","value","original","NODECOLOR","map","state","rowInfo","onClick","index","JSON","stringify","action","action2","style","color","fontSize"],"mappings":";;;AAAA,OAAQA,KAAR,IAAkBC,OAAlB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAASC,WAAT,QAA4B,0BAA5B,C,CACA;;AACA,SAAQC,cAAR,EAAwBC,UAAxB,QAAyC,UAAzC;;;AACA,IAAIC,YAAY,GAAC,EAAjB;AAGA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAS;AAAA;;AAElC,QAAMC,OAAO,GAAGZ,OAAO,CAAC,MAAMK,OAAP,EAAe,EAAf,CAAvB;AACA,QAAMQ,IAAI,GAAGF,KAAK,CAACG,OAAnB;AACA,MAAIC,aAAJ;AACA,MAAIC,OAAJ;AAEA,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA;AAJI,MAKFlB,UAAU,CAACI,WAAD,CALd;AAQIH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAiB,IAAAA,YAAY,CAACH,WAAD,CAAZ;AACD,GAJQ,EAIN,CAACA,WAAD,CAJM,CAAT,CAf8B,CAsB5B;;AAEA,sBACI;AAAA,2BAEX,QAAC,UAAD;AACC,MAAA,SAAS,EAAC,YADX;AAEC,MAAA,KAAK,EAAE;AAAEI,QAAAA,SAAS,EAAE,gHAAb;AACPC,QAAAA,KAAK,EAAE,MADA;AAEPC,QAAAA,MAAM,EAAE,MAFD;AAGPC,QAAAA,SAAS,EAAE,mBAHJ;AAIPC,QAAAA,WAAW,EAAE,mBAJN;AAKPC,QAAAA,UAAU,EAAE,mBALL;AAMP;AACAC,QAAAA,OAAO,EAAE;AAPF,OAFR;AAUC,MAAA,QAAQ,EAAE,KAVX;AAWC,MAAA,IAAI,EAAEd,IAXP;AAYC,MAAA,eAAe,EAAE,EAZlB;AAaC,MAAA,OAAO,EACL,CACE;AACIe,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,QAAQ,EAAE;AAFd,OADF,EAKE;AACID,QAAAA,MAAM,EAAE,KADZ;AAEIC,QAAAA,QAAQ,EAAE;AAFd,OALF,EASE;AACID,QAAAA,MAAM,EAAE,YADZ;AAEIC,QAAAA,QAAQ,EAAE,WAFd;AAGIC,QAAAA,IAAI,EAAGC,GAAD,iBACN,QAAC,cAAD;AAAgB,UAAA,KAAK,EAAG;AAACT,YAAAA,KAAK,EAAE,MAAR;AAAgBU,YAAAA,MAAM,EAAE;AAAxB,WAAxB;AAAyD,UAAA,KAAK,EAAED,GAAG,CAACE;AAApE;AAAA;AAAA;AAAA;AAAA;AAJJ,OATF,EAgBE;AACIL,QAAAA,MAAM,EAAE,YADZ;AAEIC,QAAAA,QAAQ,EAAE;AAFd,OAhBF,EAoBE;AACID,QAAAA,MAAM,EAAE,WADZ;AAEIC,QAAAA,QAAQ,EAAE;AAFd,OApBF,EAwBE;AACID,QAAAA,MAAM,EAAE,YADZ;AAEIC,QAAAA,QAAQ,EAAE,WAFd;AAGIC,QAAAA,IAAI,EAAGC,GAAD,IACJA,GAAG,CAACE,KAAJ,gBACC,QAAC,UAAD;AAAY,UAAA,GAAG,EAAEF,GAAG,CAACE,KAArB;AAA8B,UAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAAlD;AAAA;AAAA;AAAA;AAAA,gBADD,GAEG;AANT,OAxBF,CAdH;AAkDC,MAAA,WAAW,EAAEtB,IAAI,IAAIA,IAAI,CAACuB,GAAL,CAASL,GAAG,IAAIA,GAAhB,CAlDtB;AAmDC,MAAA,UAAU,EAAE,CAACM,KAAD,EAAQC,OAAR,KAAqB;AAIjC,eAAM;AAEJC,UAAAA,OAAO,EAAE,MAAM;AAEb,gBAAGD,OAAH,EAAW;AACTpB,cAAAA,cAAc,CAACoB,OAAO,CAACE,KAAT,CAAd;;AACA,kBAAGrB,SAAS,KAAKF,WAAjB,EAA6B;AAC3BG,gBAAAA,YAAY,CAACkB,OAAO,CAACE,KAAT,CAAZ,CAD2B,CAI7B;;AAEAxB,gBAAAA,OAAO,GAAGyB,IAAI,CAACC,SAAL,CACR;AACE,2BAASJ,OAAO,CAACE,KADnB;AAEE,4BAAUF,OAAO,CAACJ;AAFpB,iBADQ,CAAV;AAMC;AACF;;AACCvB,YAAAA,KAAK,CAACgC,MAAN,CAAa3B,OAAb,EAAqB,YAArB;AACAL,YAAAA,KAAK,CAACiC,OAAN,CAAc5B,OAAd;AACD,WAtBC;AAuBF6B,UAAAA,KAAK,EAAC;AACJC,YAAAA,KAAK,EAAGR,OAAO,GAAGA,OAAO,CAACE,KAAR,KAAkBvB,WAAlB,GAAiC,SAAjC,GAA6C,IAAhD,GAAuD,EADlE;AAEJU,YAAAA,OAAO,EAAGW,OAAO,GAAGA,OAAO,CAACE,KAAR,KAAkBvB,WAAlB,GAAiC,IAAjC,GAAwC,IAA3C,GAAkD,EAF/D;AAGJ8B,YAAAA,QAAQ,EAAGT,OAAO,GAAGA,OAAO,CAACE,KAAR,KAAkBvB,WAAlB,GAAiC,MAAjC,GAA0C,IAA7C,GAAoD;AAHlE;AAvBJ,SAAN;AA+BC;AAtFF;AAAA;AAAA;AAAA;AAAA;AAFW,mBADJ;AAgGC,CAxHF;;GAAMP,W;;KAAAA,W","sourcesContent":["import  React, {  useMemo, useState, useContext, useEffect } from 'react';\nimport ReactTable from 'react-table-6';\nimport {COLUMNS} from './columns';\nimport { DataContext } from \"../../common/DataContext\";\n//import {outJson} from '../variables.js';\nimport {TableLineColor, NodeShapes} from \"./styles\";\nvar selectedList=[]\n\n\nexport const EditorTable = (props)=>{\n\n  const columns = useMemo(() => COLUMNS,[])\n  const data = props.useData\n  var selectedRowID;\n  var outJson;\n\n  const {\n    selectedRow,\n    setSelectedRow,\n    EditorRow,\n    setEditorRow,\n  } = useContext(DataContext);\n\n\n      useEffect(() => {\n        // props.action(outJson,\"GetRowData\")\n        // setSelectedRow(EditorRow);\n        setEditorRow(selectedRow);\n      }, [selectedRow])\n\n        \n        //localStorage.setItem(\"outJson\", outJson); \n        \n        return (\n            <>\n             \n <ReactTable \n  className=\"-highlight\"\n  style={{ boxShadow: '0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)' ,\n  width: \"100%\",\n  height: \"100%\", \n  borderTop: '2px solid #f4753c',\n  borderRight: '1px solid #f4753c', \n  borderLeft: '1px solid #f4753c', \n  // borderRadius: '.9%',\n  padding: '1%' }}\n  sortable={false}\n  data={data}\n  defaultPageSize={10}\n  columns={\n    [\n      {\n          Header: 'Name',\n          accessor: \"NAME\"\n      },\n      {\n          Header: 'UID',\n          accessor: \"UID\"\n      },\n      {\n          Header: 'Line Color',\n          accessor: \"LINECOLOR\",\n          Cell: (row) => (\n          <TableLineColor style= {{width: '11vw', border: 'none'}} color={row.value} /> \n          )\n      },\n      {\n          Header: 'Line Width',\n          accessor: \"LINEWIDTH\"\n      },\n      {\n          Header: 'Node Size',\n          accessor: \"NODESIZE\"\n      },\n      {\n          Header: 'Node Shape',\n          accessor: \"NODESHAPE\",\n          Cell: (row) => (\n            row.value ?\n             <NodeShapes src={row.value }  color={row.original.NODECOLOR}/>\n             : \"\"  \n            )\n      }\n  ]\n}\n\n  resolveData={data => data.map(row => row)}\n  getTdProps={(state, rowInfo ) => {  \n    \n\n\n  return{\n    \n    onClick: () => {\n      \n      if(rowInfo){\n        setSelectedRow(rowInfo.index);\n        if(EditorRow === selectedRow){\n          setEditorRow(rowInfo.index);\n        \n\n        // console.log(rowInfo.index)\n        \n        outJson = JSON.stringify(\n          {\n            'rowId': rowInfo.index,\n            'editor': rowInfo.original\n          }\n          )\n        }\n      }\n        props.action(outJson,\"GetRowData\");\n        props.action2(outJson)\n      },\n      style:{\n        color : rowInfo ? rowInfo.index === selectedRow  ? '#f4753c' : null : \"\",\n        padding : rowInfo ? rowInfo.index === selectedRow  ? '1%' : null : \"\",\n        fontSize : rowInfo ? rowInfo.index === selectedRow  ? '20px' : null : \"\",\n        \n      }\n}\n\n  }\n  }\n\n  />\n\n            </>\n        ) \n        }"]},"metadata":{},"sourceType":"module"}